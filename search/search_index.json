{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 The Qlik Sense on Kubernetes CLI ( qliksense ) provides an imperative interface to many of the configurations that need to be applied against the declarative structure described in qliksense-k8s . The CLI facilitates: Installation of QSEoK Installation of qliksense operator to manage QSEoK Air gapped installation of QSEoK This is a technology preview that uses Qlik modified kustomize for Kubernetes manifests on qliksense-k8s repository See QlikSense edge releases on qliksense-k8s repository","title":"Overview"},{"location":"#overview","text":"The Qlik Sense on Kubernetes CLI ( qliksense ) provides an imperative interface to many of the configurations that need to be applied against the declarative structure described in qliksense-k8s . The CLI facilitates: Installation of QSEoK Installation of qliksense operator to manage QSEoK Air gapped installation of QSEoK This is a technology preview that uses Qlik modified kustomize for Kubernetes manifests on qliksense-k8s repository See QlikSense edge releases on qliksense-k8s repository","title":"Overview"},{"location":"air_gap/","text":"","title":"Air gap"},{"location":"command_reference/","text":"CLI reference \u00b6 qliksense preflight \u00b6 Preflight checks provide pre-installation cluster conformance testing and validation before we install qliksense on the cluster. We gather a suite of conformance tests that can be easily written and run on the target cluster to verify that cluster-specific requirements are met. We support the following tests at the moment as part of preflight checks, and the range of the suite will be expanded in future. Run the following command to view help about the commands supported by preflight at any moment: qliksense preflight Running all checks \u00b6 Run the following command to execute all preflight checks qliksense preflight all --mongodb-url=<mongo-server url> --mongodb-ca-cert=<path to ca-cert file> Running specific check \u00b6 Run the following command to execute a specific check qliksense preflight dns qliksense load \u00b6 qliksense load command takes input from a file or from pipe qliksense load -f cr-file.yaml cat cr-file.yaml | qliksense load -f - This will load the Custom Resource (CR) into ${ QLIKSENSE_HOME } folder, create context structure and set the current context to that CR. This will also encrypt the secrets from CR while writing the CR into the disk. qliksense apply \u00b6 qliksense apply command takes input from a file or from pipe qliksense apply -f cr-file.yaml cat cr-file.yaml | qliksense apply -f - The content of cr-file.yaml should be something like the following: apiVersion : qlik.com/v1 kind : Qliksense metadata : name : qlik-test labels : version : v0.0.2 spec : configs : qliksense : - name : acceptEULA value : \"yes\" secrets : qliksense : - name : mongoDbUri value : mongodb://qlik-test-mongodb:27017/qliksense?ssl=false profile : docker-desktop rotateKeys : \"yes\" qliksense apply does everything qliksense load does but will install Qlik Sense into the cluster as well qliksense about \u00b6 qliksense about command will display information about qliksense-k8s release. For example, running the following command will show information about default profile for 1.0.0 tag qliksense about 1.0.0 Run the following command to view options for about command: qliksense about --help Using other supported commands user might have built the CR into the location ~/.qliksense/myqliksense.yaml apiVersion : qlik.com/v1 kind : QlikSense metadata : name : myqliksense spec : profile : docker-desktop manifestsRoot : /Usr/xyz/my-k8-repo/manifests namespace : myqliksense storageClassName : efs configs : qliksense : - name : acceptEULA value : \"yes\" secrets : qliksense : - name : mongoDbUri value : \"mongo://mongo:3307\" - name : messagingPassword valueFromKey : messagingPassword In this case, the result of qliksense about command would display information from: /Usr/xyz/my-k8-repo/manifests/docker-desktop location, or Pull and show information from master branch if the directory is invalid or empty qliksense config \u00b6 qliksense config will perform operations on configurations and contexts regarding the qliksense-k8 release. It supports the following flags: qliksense config apply - generate the patches and apply manifests to K8s qliksense config list-contexts - get and list contexts qliksense config set - configure a key-value pair into the current context qliksense config set-configs - set configurations into qliksense context as key-value pairs qliksense config set-context - sets the Kubernetes context where resources are located qliksense config set-secrets <service_name>.<attribute>=\"<value>\" --secret=false - set secrets configurations into qliksense context as key-value pairs and show encrypted value as part of CR qliksense config set-secrets <service_name>.<attribute>=\"<value>\" --secret=true - set secrets configurations into qliksense context as key-value pairs and show a key reference to the created Kubernetes secret resource as part of the CR qliksense config view - view the qliksense operator CR qliksense config delete-context - deletes a specific context locally (not in-cluster). Deletes context in spec of config.yaml and locally deletes entire folder of specified context (does not delete secrets from cluster) The global file which abstracts all contexts is ~/.qliksense/config.yaml apiVersion : config.qlik.com/v1 kind : QliksenseConfig metadata : name : QliksenseConfigMetadata spec : contexts : - name : qlik-default crFile : /Users/xyz/.qliksense/contexts/qlik-default/qlik-default.yaml - name : myqliksense crFile : /Users/xyz/.qliksense/contexts/myqliksense/myqliksense.yaml - name : hello crFile : /Users/xyz/.qliksense/contexts/hello/hello.yaml currentContext : hello","title":"CLI reference"},{"location":"command_reference/#cli-reference","text":"","title":"CLI reference"},{"location":"command_reference/#qliksense-preflight","text":"Preflight checks provide pre-installation cluster conformance testing and validation before we install qliksense on the cluster. We gather a suite of conformance tests that can be easily written and run on the target cluster to verify that cluster-specific requirements are met. We support the following tests at the moment as part of preflight checks, and the range of the suite will be expanded in future. Run the following command to view help about the commands supported by preflight at any moment: qliksense preflight","title":"qliksense preflight"},{"location":"command_reference/#running-all-checks","text":"Run the following command to execute all preflight checks qliksense preflight all --mongodb-url=<mongo-server url> --mongodb-ca-cert=<path to ca-cert file>","title":"Running all checks"},{"location":"command_reference/#running-specific-check","text":"Run the following command to execute a specific check qliksense preflight dns","title":"Running specific check"},{"location":"command_reference/#qliksense-load","text":"qliksense load command takes input from a file or from pipe qliksense load -f cr-file.yaml cat cr-file.yaml | qliksense load -f - This will load the Custom Resource (CR) into ${ QLIKSENSE_HOME } folder, create context structure and set the current context to that CR. This will also encrypt the secrets from CR while writing the CR into the disk.","title":"qliksense load"},{"location":"command_reference/#qliksense-apply","text":"qliksense apply command takes input from a file or from pipe qliksense apply -f cr-file.yaml cat cr-file.yaml | qliksense apply -f - The content of cr-file.yaml should be something like the following: apiVersion : qlik.com/v1 kind : Qliksense metadata : name : qlik-test labels : version : v0.0.2 spec : configs : qliksense : - name : acceptEULA value : \"yes\" secrets : qliksense : - name : mongoDbUri value : mongodb://qlik-test-mongodb:27017/qliksense?ssl=false profile : docker-desktop rotateKeys : \"yes\" qliksense apply does everything qliksense load does but will install Qlik Sense into the cluster as well","title":"qliksense apply"},{"location":"command_reference/#qliksense-about","text":"qliksense about command will display information about qliksense-k8s release. For example, running the following command will show information about default profile for 1.0.0 tag qliksense about 1.0.0 Run the following command to view options for about command: qliksense about --help Using other supported commands user might have built the CR into the location ~/.qliksense/myqliksense.yaml apiVersion : qlik.com/v1 kind : QlikSense metadata : name : myqliksense spec : profile : docker-desktop manifestsRoot : /Usr/xyz/my-k8-repo/manifests namespace : myqliksense storageClassName : efs configs : qliksense : - name : acceptEULA value : \"yes\" secrets : qliksense : - name : mongoDbUri value : \"mongo://mongo:3307\" - name : messagingPassword valueFromKey : messagingPassword In this case, the result of qliksense about command would display information from: /Usr/xyz/my-k8-repo/manifests/docker-desktop location, or Pull and show information from master branch if the directory is invalid or empty","title":"qliksense about"},{"location":"command_reference/#qliksense-config","text":"qliksense config will perform operations on configurations and contexts regarding the qliksense-k8 release. It supports the following flags: qliksense config apply - generate the patches and apply manifests to K8s qliksense config list-contexts - get and list contexts qliksense config set - configure a key-value pair into the current context qliksense config set-configs - set configurations into qliksense context as key-value pairs qliksense config set-context - sets the Kubernetes context where resources are located qliksense config set-secrets <service_name>.<attribute>=\"<value>\" --secret=false - set secrets configurations into qliksense context as key-value pairs and show encrypted value as part of CR qliksense config set-secrets <service_name>.<attribute>=\"<value>\" --secret=true - set secrets configurations into qliksense context as key-value pairs and show a key reference to the created Kubernetes secret resource as part of the CR qliksense config view - view the qliksense operator CR qliksense config delete-context - deletes a specific context locally (not in-cluster). Deletes context in spec of config.yaml and locally deletes entire folder of specified context (does not delete secrets from cluster) The global file which abstracts all contexts is ~/.qliksense/config.yaml apiVersion : config.qlik.com/v1 kind : QliksenseConfig metadata : name : QliksenseConfigMetadata spec : contexts : - name : qlik-default crFile : /Users/xyz/.qliksense/contexts/qlik-default/qlik-default.yaml - name : myqliksense crFile : /Users/xyz/.qliksense/contexts/myqliksense/myqliksense.yaml - name : hello crFile : /Users/xyz/.qliksense/contexts/hello/hello.yaml currentContext : hello","title":"qliksense config"},{"location":"concepts/","text":"How CLI works \u00b6 At the initialization, qliksense cli creates few files in the director ~/.qliksene and it contains following files: .qliksense \u251c\u2500\u2500 config.yaml \u251c\u2500\u2500 contexts \u2502 \u2514\u2500\u2500 qlik-default \u2502 \u2514\u2500\u2500 qlik-default.yaml \u2514\u2500\u2500 ejson \u2514\u2500\u2500 keys qlik-default.yaml is a default CR created with some default values like: apiVersion : qlik.com/v1 kind : Qliksense metadata : name : qlik-default spec : profile : docker-desktop secrets : qliksense : - name : mongoDbUri value : mongodb://qlik-default-mongodb:27017/qliksense?ssl=false rotateKeys : \"yes\" releaseName : qlik-default The qliksense cli creates a default qliksense context (different from kubectl context) named qlik-default which will be the prefix for all kubernetes resources created by the cli under this context later on. New context and configuration can be created by the cli, get available commands using: qliksense config -h qliksense cli works in two modes With a git repo fork/clone of qliksense-k8s Without git repo Without git repo \u00b6 In this mode qliksense CLI downloads the specified version from qliksense-k8s and places it in ~/.qliksense/contexts/<context-name>/qlik-k8s folder. The qliksense cli creates a CR for the QlikSense operator and all config operations are performed to edit the CR. qliksense install or qliksense config apply will generate patches in local file system (i.e ~/.qliksense/contexts/<context-name>/qlik-k8s ) and Install those manifests into the cluster Create a custom resource (CR) for the qliksene operator . The operator makes the association to the installed resources so that when qliksense uninstall is performed the operator can delete all kubernetes resources related to QSEoK for the current context. With a git repo \u00b6 Create a fork or clone of qliksense-k8s and push it to your git repo/server To add your repo into CR, perform the following: qliksense config set git.repository = \"https://github.com/my-org/qliksense-k8s\" qliksense config set git.accessToken = \"<mySecretToken>\" When you perform qliksense install or qliksene config apply , qliksense operator performs these tasks: Download corresponding version of manifests from the your git repo Generate kustomize patches Install kubernetes resources Push generated patches into a new branch in the provided git repo. Gives you ability to merge patches into your master branch Create a CronJob to monitor master branch. Any changes pushed to master branch will be applied into the cluster. This is a light weight git-ops model GitOps \u00b6 To enable gitops, the following section should be in the CR .... spec : git : repository : https://github.com/<OWNER>/<REPO> accessToken : \"<git-token>\" userName : \"<git-username>\" gitOps : enabled : \"yes\" schedule : \"*/5 * * * *\" watchBranch : <myBranch> image : qlik-docker-oss.bintray.io/qliksense-repo-watcher ....","title":"How CLI works"},{"location":"concepts/#how-cli-works","text":"At the initialization, qliksense cli creates few files in the director ~/.qliksene and it contains following files: .qliksense \u251c\u2500\u2500 config.yaml \u251c\u2500\u2500 contexts \u2502 \u2514\u2500\u2500 qlik-default \u2502 \u2514\u2500\u2500 qlik-default.yaml \u2514\u2500\u2500 ejson \u2514\u2500\u2500 keys qlik-default.yaml is a default CR created with some default values like: apiVersion : qlik.com/v1 kind : Qliksense metadata : name : qlik-default spec : profile : docker-desktop secrets : qliksense : - name : mongoDbUri value : mongodb://qlik-default-mongodb:27017/qliksense?ssl=false rotateKeys : \"yes\" releaseName : qlik-default The qliksense cli creates a default qliksense context (different from kubectl context) named qlik-default which will be the prefix for all kubernetes resources created by the cli under this context later on. New context and configuration can be created by the cli, get available commands using: qliksense config -h qliksense cli works in two modes With a git repo fork/clone of qliksense-k8s Without git repo","title":"How CLI works"},{"location":"concepts/#without-git-repo","text":"In this mode qliksense CLI downloads the specified version from qliksense-k8s and places it in ~/.qliksense/contexts/<context-name>/qlik-k8s folder. The qliksense cli creates a CR for the QlikSense operator and all config operations are performed to edit the CR. qliksense install or qliksense config apply will generate patches in local file system (i.e ~/.qliksense/contexts/<context-name>/qlik-k8s ) and Install those manifests into the cluster Create a custom resource (CR) for the qliksene operator . The operator makes the association to the installed resources so that when qliksense uninstall is performed the operator can delete all kubernetes resources related to QSEoK for the current context.","title":"Without git repo"},{"location":"concepts/#with-a-git-repo","text":"Create a fork or clone of qliksense-k8s and push it to your git repo/server To add your repo into CR, perform the following: qliksense config set git.repository = \"https://github.com/my-org/qliksense-k8s\" qliksense config set git.accessToken = \"<mySecretToken>\" When you perform qliksense install or qliksene config apply , qliksense operator performs these tasks: Download corresponding version of manifests from the your git repo Generate kustomize patches Install kubernetes resources Push generated patches into a new branch in the provided git repo. Gives you ability to merge patches into your master branch Create a CronJob to monitor master branch. Any changes pushed to master branch will be applied into the cluster. This is a light weight git-ops model","title":"With a git repo"},{"location":"concepts/#gitops","text":"To enable gitops, the following section should be in the CR .... spec : git : repository : https://github.com/<OWNER>/<REPO> accessToken : \"<git-token>\" userName : \"<git-username>\" gitOps : enabled : \"yes\" schedule : \"*/5 * * * *\" watchBranch : <myBranch> image : qlik-docker-oss.bintray.io/qliksense-repo-watcher ....","title":"GitOps"},{"location":"getting_started/","text":"Getting started \u00b6 Requirements \u00b6 Kubernetes cluster (Docker Desktop with enabled Kubernetes) kubectl installed, configured and able to communicate with kubernetes cluster. qliksense CLI uses kubectl under the hood to perform operations on cluster Installing qliksense CLI \u00b6 Download the executable for your platform from releases page and rename it to qliksense Linux curl -Lo qliksense https://github.com/qlik-oss/sense-installer/releases/download/v0.7.0/qliksense-linux-amd64 chmod +x qliksense sudo mv qliksense /usr/local/bin MacOS curl -Lo qliksense https://github.com/qlik-oss/sense-installer/releases/download/v0.7.0/qliksense-darwin-amd64 chmod +x qliksense sudo mv qliksense /usr/local/bin Windows Download Windows executable and add it in your PATH as qliksense.exe https://github.com/qlik-oss/sense-installer/releases/download/v0.7.0/qliksense-windows-amd64.exe Quick start \u00b6 To download the version v0.0.2 from qliksense-k8s releases . qliksense fetch v0.0.2 To install CRDs for QSEoK and qliksense operator into the kubernetes cluster. qliksense crds install --all To install QSEoK into a namespace in the kubernetes cluster where kubectl is pointing to. qliksense install --acceptEULA = \"yes\"","title":"Getting started"},{"location":"getting_started/#getting-started","text":"","title":"Getting started"},{"location":"getting_started/#requirements","text":"Kubernetes cluster (Docker Desktop with enabled Kubernetes) kubectl installed, configured and able to communicate with kubernetes cluster. qliksense CLI uses kubectl under the hood to perform operations on cluster","title":"Requirements"},{"location":"getting_started/#installing-qliksense-cli","text":"Download the executable for your platform from releases page and rename it to qliksense Linux curl -Lo qliksense https://github.com/qlik-oss/sense-installer/releases/download/v0.7.0/qliksense-linux-amd64 chmod +x qliksense sudo mv qliksense /usr/local/bin MacOS curl -Lo qliksense https://github.com/qlik-oss/sense-installer/releases/download/v0.7.0/qliksense-darwin-amd64 chmod +x qliksense sudo mv qliksense /usr/local/bin Windows Download Windows executable and add it in your PATH as qliksense.exe https://github.com/qlik-oss/sense-installer/releases/download/v0.7.0/qliksense-windows-amd64.exe","title":"Installing qliksense CLI"},{"location":"getting_started/#quick-start","text":"To download the version v0.0.2 from qliksense-k8s releases . qliksense fetch v0.0.2 To install CRDs for QSEoK and qliksense operator into the kubernetes cluster. qliksense crds install --all To install QSEoK into a namespace in the kubernetes cluster where kubectl is pointing to. qliksense install --acceptEULA = \"yes\"","title":"Quick start"},{"location":"preflight_checks/","text":"Preflight checks \u00b6 Preflight checks provide pre-installation cluster conformance testing and validation before we install qliksense on the cluster. We gather a suite of conformance tests that can be easily written and run on the target cluster to verify that cluster-specific requirements are met. We support the following tests at the moment as part of preflight checks, and the range of the suite will be expanded in future. Run the following command to view help about the commands supported by preflight at any moment: $ qliksense preflight perform preflight checks on the cluster Usage: qliksense preflight [ command ] Examples: qliksense preflight <preflight_check_to_run> Available Commands: all perform all checks dns perform preflight dns check k8s-version check k8s version Flags: -h, --help help for preflight DNS check \u00b6 Run the following command to perform preflight DNS check. We setup a kubernetes deployment and try to reach it as part of establishing DNS connectivity in this check. The expected output should be similar to the one shown below. $ qliksense preflight dns Preflight DNS check --------------------- Created deployment \"dep-dns-preflight-check\" Created service \"svc-dns-pf-check\" Created pod: pf-pod-1 Fetching pod: pf-pod-1 Fetching pod: pf-pod-1 Exec-ing into the container... Preflight DNS check: PASSED Completed preflight DNS check Cleaning up resources... Deleted pod: pf-pod-1 Deleted service: svc-dns-pf-check Deleted deployment: dep-dns-preflight-check Kubernetes version check \u00b6 We check the version of the target kubernetes cluster and ensure that it falls in the valid range of kubernetes versions that are supported by qliksense. The command to run this check and the expected similar output are as shown below: $ qliksense preflight k8s-version Preflight kubernetes minimum version check ------------------------------------------ Kubernetes API Server version: v1.15.5 Current K8s Version: 1 .15.5 Current 1 .15.5 is greater than minimum required version:1.11.0, hence good to go Preflight minimum kubernetes version check: PASSED Completed Preflight kubernetes minimum version check Service check \u00b6 We use the commmand below to test if we are able to create a service in the cluster. $ qliksense preflight service Preflight service check ----------------------- Preflight service check: Created service \"svc-pf-check\" Preflight service creation check: PASSED Cleaning up resources... Deleted service: svc-pf-check Completed preflight service check Deployment check \u00b6 We use the commmand below to test if we are able to create a deployment in the cluster. After the test exexutes, we wait until the created deployment terminates before we exit the command. $ qliksense preflight deployment Preflight deployment check ----------------------- Preflight deployment check: Created deployment \"deployment-preflight-check\" Preflight Deployment check: PASSED Cleaning up resources... Deleted deployment: deployment-preflight-check Completed preflight deployment check Pod check \u00b6 We use the commmand below to test if we are able to create a pod in the cluster. $ qliksense preflight pod Preflight pod check -------------------- Preflight pod check: Created pod: pod-pf-check Preflight pod creation check: PASSED Cleaning up resources... Deleted pod: pod-pf-check Completed preflight pod check Create-Role check \u00b6 We use the command below to test if we are able to create a role in the cluster $ qliksense preflight create-role Preflight create-role check --------------------------- Preflight create-role check: Created role: role-preflight-check Preflight create-role check: PASSED Cleaning up resources... Deleted role: role-preflight-check Completed preflight create-role check Create-RoleBinding check \u00b6 We use the command below to test if we are able to create a role binding in the cluster $ qliksense preflight createRoleBinding Preflight create roleBinding check --------------------------- Preflight createRoleBinding check: Created RoleBinding: role-binding-preflight-check Preflight createRoleBinding check: PASSED Cleaning up resources... Deleting RoleBinding: role-binding-preflight-check Deleted RoleBinding: role-binding-preflight-check Completed preflight createRoleBinding check Create-ServiceAccount check \u00b6 We use the command below to test if we are able to create a service account in the cluster $ qliksense preflight createServiceAccount Preflight create ServiceAccount check ------------------------------------- Preflight createServiceAccount check: Created Service Account: preflight-check-test-serviceaccount Preflight createServiceAccount check: PASSED Cleaning up resources... Deleting ServiceAccount: preflight-check-test-serviceaccount Deleted ServiceAccount: preflight-check-test-serviceaccount Completed preflight createServiceAccount check CreateRB check \u00b6 We use the command below to combine creation of role, role binding, and service account tests $ qliksense preflight createRB Preflight createRB check ------------------------------------- Preflight create-role check: Created role: role-preflight-check Preflight create-role check: PASSED Cleaning up resources... Deleted role: role-preflight-check Completed preflight create-role check Preflight create RoleBinding check: Created RoleBinding: role-binding-preflight-check Preflight create RoleBinding check: PASSED Cleaning up resources... Deleted RoleBinding: role-binding-preflight-check Completed preflight create RoleBinding check Preflight createServiceAccount check: Created Service Account: preflight-check-test-serviceaccount Preflight createServiceAccount check: PASSED Cleaning up resources... Deleted ServiceAccount: preflight-check-test-serviceaccount Completed preflight createServiceAccount check Completed preflight CreateRB check Mongodb check \u00b6 We can check if we are able to connect to an instance of mongodb on the cluster by either supplying the mongodbUri as part of the command or infer it from the current context. qliksense preflight mongo --url = <url> OR qliksense preflight mongo qliksense preflight mongo --url = <mongo-server url> --ca-cert = <path to ca-cert file> Preflight mongo check --------------------- Preflight mongodb check: Created pod: pf-mongo-pod stdout: MongoDB shell version v4.2.5 connecting to: <url>/?compressors = disabled & gssapiServiceName = mongodb Implicit session: session { \"id\" : UUID ( \"...\" ) } MongoDB server version: 4 .2.5 bye stderr: Preflight mongo check: PASSED Deleted pod: pf-mongo-pod Completed preflight mongodb check Running all checks \u00b6 Run the command shown below to execute all preflight checks. $ qliksense preflight all --mongodb-url = <url> OR $ qliksense preflight all --mongodb-url = <mongo-server url> --mongodb-ca-cert = <path to ca-cert file> Running all preflight checks Preflight DNS check ------------------- Created deployment \"dep-dns-preflight-check\" Created service \"svc-dns-pf-check\" Created pod: pf-pod-1 Fetching pod: pf-pod-1 Fetching pod: pf-pod-1 Exec-ing into the container... Preflight DNS check: PASSED Completed preflight DNS check Cleaning up resources... Deleted pod: pf-pod-1 Deleted service: svc-dns-pf-check Deleted deployment: dep-dns-preflight-check Preflight kubernetes minimum version check ------------------------------------------ Kubernetes API Server version: v1.15.5 Current K8s Version: 1 .15.5 Current 1 .15.5 is greater than minimum required version:1.11.0, hence good to go Preflight minimum kubernetes version check: PASSED Completed Preflight kubernetes minimum version check ... ... All preflight checks have PASSED Completed running all preflight checks","title":"Preflight checks"},{"location":"preflight_checks/#preflight-checks","text":"Preflight checks provide pre-installation cluster conformance testing and validation before we install qliksense on the cluster. We gather a suite of conformance tests that can be easily written and run on the target cluster to verify that cluster-specific requirements are met. We support the following tests at the moment as part of preflight checks, and the range of the suite will be expanded in future. Run the following command to view help about the commands supported by preflight at any moment: $ qliksense preflight perform preflight checks on the cluster Usage: qliksense preflight [ command ] Examples: qliksense preflight <preflight_check_to_run> Available Commands: all perform all checks dns perform preflight dns check k8s-version check k8s version Flags: -h, --help help for preflight","title":"Preflight checks"},{"location":"preflight_checks/#dns-check","text":"Run the following command to perform preflight DNS check. We setup a kubernetes deployment and try to reach it as part of establishing DNS connectivity in this check. The expected output should be similar to the one shown below. $ qliksense preflight dns Preflight DNS check --------------------- Created deployment \"dep-dns-preflight-check\" Created service \"svc-dns-pf-check\" Created pod: pf-pod-1 Fetching pod: pf-pod-1 Fetching pod: pf-pod-1 Exec-ing into the container... Preflight DNS check: PASSED Completed preflight DNS check Cleaning up resources... Deleted pod: pf-pod-1 Deleted service: svc-dns-pf-check Deleted deployment: dep-dns-preflight-check","title":"DNS check"},{"location":"preflight_checks/#kubernetes-version-check","text":"We check the version of the target kubernetes cluster and ensure that it falls in the valid range of kubernetes versions that are supported by qliksense. The command to run this check and the expected similar output are as shown below: $ qliksense preflight k8s-version Preflight kubernetes minimum version check ------------------------------------------ Kubernetes API Server version: v1.15.5 Current K8s Version: 1 .15.5 Current 1 .15.5 is greater than minimum required version:1.11.0, hence good to go Preflight minimum kubernetes version check: PASSED Completed Preflight kubernetes minimum version check","title":"Kubernetes version check"},{"location":"preflight_checks/#service-check","text":"We use the commmand below to test if we are able to create a service in the cluster. $ qliksense preflight service Preflight service check ----------------------- Preflight service check: Created service \"svc-pf-check\" Preflight service creation check: PASSED Cleaning up resources... Deleted service: svc-pf-check Completed preflight service check","title":"Service check"},{"location":"preflight_checks/#deployment-check","text":"We use the commmand below to test if we are able to create a deployment in the cluster. After the test exexutes, we wait until the created deployment terminates before we exit the command. $ qliksense preflight deployment Preflight deployment check ----------------------- Preflight deployment check: Created deployment \"deployment-preflight-check\" Preflight Deployment check: PASSED Cleaning up resources... Deleted deployment: deployment-preflight-check Completed preflight deployment check","title":"Deployment check"},{"location":"preflight_checks/#pod-check","text":"We use the commmand below to test if we are able to create a pod in the cluster. $ qliksense preflight pod Preflight pod check -------------------- Preflight pod check: Created pod: pod-pf-check Preflight pod creation check: PASSED Cleaning up resources... Deleted pod: pod-pf-check Completed preflight pod check","title":"Pod check"},{"location":"preflight_checks/#create-role-check","text":"We use the command below to test if we are able to create a role in the cluster $ qliksense preflight create-role Preflight create-role check --------------------------- Preflight create-role check: Created role: role-preflight-check Preflight create-role check: PASSED Cleaning up resources... Deleted role: role-preflight-check Completed preflight create-role check","title":"Create-Role check"},{"location":"preflight_checks/#create-rolebinding-check","text":"We use the command below to test if we are able to create a role binding in the cluster $ qliksense preflight createRoleBinding Preflight create roleBinding check --------------------------- Preflight createRoleBinding check: Created RoleBinding: role-binding-preflight-check Preflight createRoleBinding check: PASSED Cleaning up resources... Deleting RoleBinding: role-binding-preflight-check Deleted RoleBinding: role-binding-preflight-check Completed preflight createRoleBinding check","title":"Create-RoleBinding check"},{"location":"preflight_checks/#create-serviceaccount-check","text":"We use the command below to test if we are able to create a service account in the cluster $ qliksense preflight createServiceAccount Preflight create ServiceAccount check ------------------------------------- Preflight createServiceAccount check: Created Service Account: preflight-check-test-serviceaccount Preflight createServiceAccount check: PASSED Cleaning up resources... Deleting ServiceAccount: preflight-check-test-serviceaccount Deleted ServiceAccount: preflight-check-test-serviceaccount Completed preflight createServiceAccount check","title":"Create-ServiceAccount check"},{"location":"preflight_checks/#createrb-check","text":"We use the command below to combine creation of role, role binding, and service account tests $ qliksense preflight createRB Preflight createRB check ------------------------------------- Preflight create-role check: Created role: role-preflight-check Preflight create-role check: PASSED Cleaning up resources... Deleted role: role-preflight-check Completed preflight create-role check Preflight create RoleBinding check: Created RoleBinding: role-binding-preflight-check Preflight create RoleBinding check: PASSED Cleaning up resources... Deleted RoleBinding: role-binding-preflight-check Completed preflight create RoleBinding check Preflight createServiceAccount check: Created Service Account: preflight-check-test-serviceaccount Preflight createServiceAccount check: PASSED Cleaning up resources... Deleted ServiceAccount: preflight-check-test-serviceaccount Completed preflight createServiceAccount check Completed preflight CreateRB check","title":"CreateRB check"},{"location":"preflight_checks/#mongodb-check","text":"We can check if we are able to connect to an instance of mongodb on the cluster by either supplying the mongodbUri as part of the command or infer it from the current context. qliksense preflight mongo --url = <url> OR qliksense preflight mongo qliksense preflight mongo --url = <mongo-server url> --ca-cert = <path to ca-cert file> Preflight mongo check --------------------- Preflight mongodb check: Created pod: pf-mongo-pod stdout: MongoDB shell version v4.2.5 connecting to: <url>/?compressors = disabled & gssapiServiceName = mongodb Implicit session: session { \"id\" : UUID ( \"...\" ) } MongoDB server version: 4 .2.5 bye stderr: Preflight mongo check: PASSED Deleted pod: pf-mongo-pod Completed preflight mongodb check","title":"Mongodb check"},{"location":"preflight_checks/#running-all-checks","text":"Run the command shown below to execute all preflight checks. $ qliksense preflight all --mongodb-url = <url> OR $ qliksense preflight all --mongodb-url = <mongo-server url> --mongodb-ca-cert = <path to ca-cert file> Running all preflight checks Preflight DNS check ------------------- Created deployment \"dep-dns-preflight-check\" Created service \"svc-dns-pf-check\" Created pod: pf-pod-1 Fetching pod: pf-pod-1 Fetching pod: pf-pod-1 Exec-ing into the container... Preflight DNS check: PASSED Completed preflight DNS check Cleaning up resources... Deleted pod: pf-pod-1 Deleted service: svc-dns-pf-check Deleted deployment: dep-dns-preflight-check Preflight kubernetes minimum version check ------------------------------------------ Kubernetes API Server version: v1.15.5 Current K8s Version: 1 .15.5 Current 1 .15.5 is greater than minimum required version:1.11.0, hence good to go Preflight minimum kubernetes version check: PASSED Completed Preflight kubernetes minimum version check ... ... All preflight checks have PASSED Completed running all preflight checks","title":"Running all checks"}]}